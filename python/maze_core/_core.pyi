# This file is automatically generated by pyo3_stub_gen
# ruff: noqa: E501, F401

import builtins
import typing
from enum import Enum

class Action:
    class Move(Action):
        __match_args__ = ("id", "velocity",)
        @property
        def id(self) -> builtins.int: ...
        @property
        def velocity(self) -> tuple[builtins.float, builtins.float]: ...
        def __new__(cls, id:builtins.int, velocity:tuple[builtins.float, builtins.float]) -> Action.Move: ...
    
    class PickupFlag(Action):
        __match_args__ = ("id",)
        @property
        def id(self) -> builtins.int: ...
        def __new__(cls, id:builtins.int) -> Action.PickupFlag: ...
    
    class DropFlag(Action):
        __match_args__ = ("id",)
        @property
        def id(self) -> builtins.int: ...
        def __new__(cls, id:builtins.int) -> Action.DropFlag: ...
    
    ...

class AgentConfig:
    @property
    def name(self) -> builtins.str: ...
    @name.setter
    def name(self, value: builtins.str) -> None: ...
    @property
    def speed(self) -> builtins.float: ...
    @speed.setter
    def speed(self, value: builtins.float) -> None: ...
    @property
    def policy_hz(self) -> builtins.float: ...
    @policy_hz.setter
    def policy_hz(self, value: builtins.float) -> None: ...
    @property
    def odometry_stddev(self) -> builtins.float: ...
    @odometry_stddev.setter
    def odometry_stddev(self, value: builtins.float) -> None: ...
    @property
    def range_stddev(self) -> builtins.float: ...
    @range_stddev.setter
    def range_stddev(self, value: builtins.float) -> None: ...
    @property
    def occupancy_grid_cell_size(self) -> builtins.float: ...
    @occupancy_grid_cell_size.setter
    def occupancy_grid_cell_size(self, value: builtins.float) -> None: ...

class AgentState:
    @property
    def id(self) -> builtins.int:
        r"""
        The unique ID of the agent entity.
        """
    @property
    def position(self) -> tuple[builtins.float, builtins.float]:
        r"""
        The (noisy!) position of the agent in world coordinates
        """
    @property
    def position_stddev(self) -> builtins.float:
        r"""
        The standard deviation of the position noise. This noise is Gaussian with mean 0 and stddev `position_stddev`.
        """
    @property
    def raycasts(self) -> builtins.list[HitInfo]:
        r"""
        The results of the agent's raycasts.
        """
    @property
    def flag(self) -> typing.Optional[builtins.int]:
        r"""
        The entity ID of the flag the agent is currently carrying, if any.
        """
    @property
    def max_speed(self) -> builtins.float:
        r"""
        The maximum linear speed of the agent.
        """

class CameraConfig:
    @property
    def scale(self) -> builtins.float: ...
    @scale.setter
    def scale(self, value: builtins.float) -> None: ...

class CapturePointConfig:
    @property
    def number(self) -> builtins.int: ...
    @number.setter
    def number(self, value: builtins.int) -> None: ...

class FlagConfig:
    @property
    def number(self) -> builtins.int: ...
    @number.setter
    def number(self, value: builtins.int) -> None: ...

class GameState:
    @property
    def agent(self) -> AgentState: ...
    @property
    def total_flags(self) -> builtins.int: ...
    @property
    def collected_flags(self) -> builtins.int: ...
    @property
    def world_width(self) -> builtins.float: ...
    @property
    def world_height(self) -> builtins.float: ...

class HitInfo:
    @property
    def theta(self) -> builtins.float:
        r"""
        The angle of the raycast in radians, relative to the +x axis (right on the screen). Remember, +y points down on the screen!
        """
    @property
    def hit(self) -> EntityType:
        r"""
        The type of entity that was hit by the raycast.
        """
    @property
    def distance(self) -> builtins.float:
        r"""
        How far the ray traveled before hitting something, or the max distance if nothing was hit.
        """
    @property
    def max_distance(self) -> builtins.float:
        r"""
        The maximum distance the raycast could travel.
        """
    @property
    def hit_confidence(self) -> SensorConfidence:
        r"""
        The confidence (probability of each class) of the thing that the ray hit.
        If nothing was hit, this will be the confidence of an empty space.
        """
    @property
    def free_confidence(self) -> SensorConfidence:
        r"""
        The confidence (probability of each class) of the cells that the ray passed through of being free space.
        """
    def __str__(self) -> builtins.str: ...

class MazeConfig:
    @property
    def agent(self) -> AgentConfig: ...
    @agent.setter
    def agent(self, value: AgentConfig) -> None: ...
    @property
    def flags(self) -> FlagConfig: ...
    @flags.setter
    def flags(self, value: FlagConfig) -> None: ...
    @property
    def capture_points(self) -> CapturePointConfig: ...
    @capture_points.setter
    def capture_points(self, value: CapturePointConfig) -> None: ...
    @property
    def camera(self) -> CameraConfig: ...
    @camera.setter
    def camera(self, value: CameraConfig) -> None: ...
    @property
    def maze_generation(self) -> MazeGenerationConfig: ...
    @maze_generation.setter
    def maze_generation(self, value: MazeGenerationConfig) -> None: ...
    @property
    def debug(self) -> builtins.bool: ...
    @debug.setter
    def debug(self, value: builtins.bool) -> None: ...
    @property
    def headless(self) -> builtins.bool: ...
    @headless.setter
    def headless(self, value: builtins.bool) -> None: ...
    @property
    def use_true_map(self) -> builtins.bool: ...
    @use_true_map.setter
    def use_true_map(self, value: builtins.bool) -> None: ...

class MazeGenerationConfig:
    @property
    def seed(self) -> typing.Optional[builtins.int]: ...
    @seed.setter
    def seed(self, value: typing.Optional[builtins.int]) -> None: ...
    @property
    def width(self) -> builtins.float: ...
    @width.setter
    def width(self, value: builtins.float) -> None: ...
    @property
    def height(self) -> builtins.float: ...
    @height.setter
    def height(self, value: builtins.float) -> None: ...
    @property
    def cell_size(self) -> builtins.float: ...
    @cell_size.setter
    def cell_size(self, value: builtins.float) -> None: ...

class OccupancyGrid:
    @property
    def cell_size(self) -> builtins.float:
        r"""
        Size of each cell in world units
        """
    @property
    def width(self) -> builtins.int:
        r"""
        Number of cells in the x direction
        """
    @property
    def height(self) -> builtins.int:
        r"""
        Number of cells in the y direction
        """
    @property
    def shape(self) -> tuple[builtins.int, builtins.int]:
        r"""
        Returns (width, height)
        """
    def __new__(cls, width:builtins.int, height:builtins.int, cell_size:builtins.float) -> OccupancyGrid: ...
    def __getitem__(self, key:typing.Any) -> OccupancyGridEntry: ...

class OccupancyGridEntry:
    @property
    def assignment(self) -> typing.Optional[EntityType]:
        r"""
        The assignment of the cell, or None if unassigned. Must be manually set
        """
    @assignment.setter
    def assignment(self, value: typing.Optional[EntityType]) -> None: ...
    @property
    def logit_free(self) -> builtins.float:
        r"""
        The logit value for the "free" class. Higher means more likely to be free. Clamped to [-LOGIT_CLAMP, LOGIT_CLAMP]
        """
    @logit_free.setter
    def logit_free(self, value: builtins.float) -> None: ...
    @property
    def logit_wall(self) -> builtins.float:
        r"""
        The logit value for the "wall" class. Higher means more likely to be wall. Clamped to [-LOGIT_CLAMP, LOGIT_CLAMP]
        """
    @logit_wall.setter
    def logit_wall(self, value: builtins.float) -> None: ...
    @property
    def logit_flag(self) -> builtins.float:
        r"""
        The logit value for the "flag" class. Higher means more likely to be flag. Clamped to [-LOGIT_CLAMP, LOGIT_CLAMP]
        """
    @logit_flag.setter
    def logit_flag(self, value: builtins.float) -> None: ...
    @property
    def logit_capture_point(self) -> builtins.float:
        r"""
        The logit value for the "capture_point" class. Higher means more likely to be capture_point. Clamped to [-LOGIT_CLAMP, LOGIT_CLAMP]
        """
    @logit_capture_point.setter
    def logit_capture_point(self, value: builtins.float) -> None: ...
    def __str__(self) -> builtins.str: ...
    def probabilities(self) -> tuple[builtins.float, builtins.float, builtins.float, builtins.float]:
        r"""
        Returns the probabilities of each class as a tuple (p_free, p_wall, p_flag, p_capture_point) using a softmax over the logits.
        """

class OccupancyGridView:
    @property
    def cell_size(self) -> builtins.float: ...
    @property
    def width(self) -> builtins.int: ...
    @property
    def height(self) -> builtins.int: ...
    @property
    def shape(self) -> tuple[builtins.int, builtins.int]: ...
    def __getitem__(self, key:typing.Any) -> OccupancyGridEntry: ...

class SensorConfidence:
    @property
    def p_free(self) -> builtins.float:
        r"""
        Probability of being free space
        """
    @property
    def p_wall(self) -> builtins.float:
        r"""
        Probability of being a wall
        """
    @property
    def p_flag(self) -> builtins.float:
        r"""
        Probability of being a flag
        """
    @property
    def p_capture_point(self) -> builtins.float:
        r"""
        Probability of being a capture point
        """
    def __new__(cls, p_free:builtins.float, p_wall:builtins.float, p_flag:builtins.float, p_capture_point:builtins.float) -> SensorConfidence: ...
    def as_tuple(self) -> tuple[builtins.float, builtins.float, builtins.float, builtins.float]: ...

class StateQueue:
    @property
    def rate_hz(self) -> builtins.float: ...
    def get(self, timeout_ms:typing.Optional[builtins.int]) -> typing.Optional[tuple[GameState, OccupancyGridView, OccupancyGridView]]:
        r"""
        Wait for next GameState (timeout ms optional). Returns None on timeout.
        """
    def stop(self) -> None:
        r"""
        Ask the sim to stop.
        """
    def join(self) -> None:
        r"""
        Join the sim thread.
        """

class EntityType(Enum):
    r"""
    The type of entity that was hit by a raycast. Note, that "Unknown" should not occur.
    """
    Wall = ...
    Empty = ...
    Flag = ...
    CapturePoint = ...
    Unknown = ...

def parse_config(config_path:builtins.str) -> MazeConfig: ...

def run(config:MazeConfig, policy:typing.Any) -> typing.Optional[StateQueue]: ...


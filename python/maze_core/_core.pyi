# This file is automatically generated by pyo3_stub_gen
# ruff: noqa: E501, F401

import builtins
import typing

class Action:
    class Move(Action):
        __match_args__ = ("id", "velocity",)
        @property
        def id(self) -> builtins.int: ...
        @property
        def velocity(self) -> tuple[builtins.float, builtins.float]: ...
        def __new__(cls, id:builtins.int, velocity:tuple[builtins.float, builtins.float]) -> Action.Move: ...
    
    class PickupFlag(Action):
        __match_args__ = ("id",)
        @property
        def id(self) -> builtins.int: ...
        def __new__(cls, id:builtins.int) -> Action.PickupFlag: ...
    
    class DropFlag(Action):
        __match_args__ = ("id",)
        @property
        def id(self) -> builtins.int: ...
        def __new__(cls, id:builtins.int) -> Action.DropFlag: ...
    
    ...

class AgentConfig:
    @property
    def name(self) -> builtins.str: ...
    @name.setter
    def name(self, value: builtins.str) -> None: ...
    @property
    def speed(self) -> builtins.float: ...
    @speed.setter
    def speed(self, value: builtins.float) -> None: ...
    @property
    def position(self) -> tuple[builtins.float, builtins.float]: ...
    @position.setter
    def position(self, value: tuple[builtins.float, builtins.float]) -> None: ...
    @property
    def policy_hz(self) -> builtins.float: ...
    @policy_hz.setter
    def policy_hz(self, value: builtins.float) -> None: ...

class AgentState:
    @property
    def id(self) -> builtins.int: ...
    @property
    def position(self) -> tuple[builtins.float, builtins.float]: ...
    @property
    def raycasts(self) -> builtins.list[HitInfo]: ...
    @property
    def flag(self) -> typing.Optional[builtins.int]: ...
    @property
    def max_speed(self) -> builtins.float: ...

class CameraConfig:
    @property
    def scale(self) -> builtins.float: ...
    @scale.setter
    def scale(self, value: builtins.float) -> None: ...

class CapturePointConfig:
    @property
    def positions(self) -> builtins.list[tuple[builtins.float, builtins.float]]: ...
    @positions.setter
    def positions(self, value: builtins.list[tuple[builtins.float, builtins.float]]) -> None: ...

class FlagConfig:
    @property
    def positions(self) -> builtins.list[tuple[builtins.float, builtins.float]]: ...
    @positions.setter
    def positions(self, value: builtins.list[tuple[builtins.float, builtins.float]]) -> None: ...

class GameState:
    @property
    def agent(self) -> AgentState: ...
    @property
    def total_flags(self) -> builtins.int: ...
    @property
    def collected_flags(self) -> builtins.int: ...
    @property
    def world_width(self) -> builtins.float: ...
    @property
    def world_height(self) -> builtins.float: ...

class HitInfo:
    ...

class MazeConfig:
    @property
    def agent(self) -> AgentConfig: ...
    @agent.setter
    def agent(self, value: AgentConfig) -> None: ...
    @property
    def flags(self) -> FlagConfig: ...
    @flags.setter
    def flags(self, value: FlagConfig) -> None: ...
    @property
    def capture_points(self) -> CapturePointConfig: ...
    @capture_points.setter
    def capture_points(self, value: CapturePointConfig) -> None: ...
    @property
    def camera(self) -> CameraConfig: ...
    @camera.setter
    def camera(self, value: CameraConfig) -> None: ...
    @property
    def debug(self) -> builtins.bool: ...
    @debug.setter
    def debug(self, value: builtins.bool) -> None: ...
    @property
    def headless(self) -> builtins.bool: ...
    @headless.setter
    def headless(self, value: builtins.bool) -> None: ...
    @property
    def seed(self) -> builtins.int: ...
    @seed.setter
    def seed(self, value: builtins.int) -> None: ...

def parse_config(config_path:builtins.str) -> MazeConfig: ...

def run(config:MazeConfig, policy:typing.Any) -> None: ...

